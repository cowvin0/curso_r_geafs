---
title: Introdução à linguagem de programação R
author: Gabriel de Jesus Pereira
subtitle: GEAFS - Grupo de Estudos de Ambientes Fluviais Semiáridos
Date: today
execute:
  refresh: true
  warning: false
  error: false
  echo: true
revealjs-plugins:
  - attribution
  - roughnotation
  - pointer
format:
  revealjs:
    code-copy: true
    theme: [default, style.scss]
    embed-resources: true
    transition: slide
    background-transition: fade
    scrollable: true
    preview-links: auto
editor:
  markdown:
    wrap: 72
lang: pt-br
eval: false
---


# O que são pacotes

## O que são pacotes {.smaller}

A linguagem base do R vem com inúmeras funções implementadas para operações numéricas, análise estatística, gráficos para visualização e muitos outros. Essas funções da própria linguagem são conhecidas como **built-in**. No entanto, é possível utilizar funcionalidades implementadas por outros usuários da linguagem. Para isso, podemos instalar pacotes.

Os pacotes em R e muitas outras linguagens são um conjunto de funcionalidades implementadas por usuários da própria linguagem. Por exemplo, um dos pacotes mais conhecidos para visualização de gráficos é o **ggplot2**, que foi implementada por Hadley Wickham. Este pacote implementa uma série de funções para visualização estatística, permitindo criar Box-plots, gráficos de dispersão, gráficos de linhas e uma miríade de outros gráficos.

# Como instalar pacotes

## Como instalar pacotes {.smaller}

Existe uma função principal para instalação de pacotes: *install.packages*. Você pode verificar sua documentação digitando *?install.packages*^[Obs: Utilizar *?* antes do nome de uma função no R é uma forma de olhar a documentação de uma função e obter informações sobre sua funcionalidade. Caso você queira pesquisar afundo no *sistema de ajuda* do R, você pode utilizar *??* antes do nome de uma função e irá procurar em diferentes pacotes funções com aquele mesmo nome. A função *help* é o mesmo que utilizar *?*.] no seu console do R. Dessa forma, podemos instalar o pacote *ggplot2* da seguinte forma:

```{r output=FALSE}
install.packages("ggplot2")
```

Agora que o pacote foi instalado, você pode utilizar suas funções chamando ele com a função *library*. A função *library* carrega
todos as funções implementadas num pacote. Assim, temos:

```{r output=FALSE}
library(ggplot2)
```

# Operações matemáticas básicas

## Operações matemáticas básicas {.smaller}

A linguagem de programação R tem implementado 7 operações matemáticas básicas implementadas na linguagem, além de suportar uma grande quantidade de funções matemáticas que permitem realizar operações mais complexas. Por exemplo, caso queira calcular o $\ln\left(10\right)$, podemos utilizar a função $\log\left(\right)$. Veja um exemplo:

```{r eval=TRUE, echo=TRUE}
log(10)
```

Com a função $\exp\left(\right)$ é possível calcular a função exponencial $\left(e^x\right)$. Assim, calculando $e^2$:

```{r eval=TRUE}
exp(2)
```


## Operações matemáticas básicas {.smaller}

: Resumo das operações matemáticas

| Operação |           Nome            |  Exemplo  |
| :------: | :-----------------------: | :-------: |
|    +     |          Adição           |  `x + y`  |
|    -     |         Subtração         |  `x - y`  |
|    *     |       Multiplicação       |  `x * y`  |
|    /     |          Divisão          |  `x / y`  |
|    ^     |         Expoente          |  `x ^ y`  |
|    %%    | Resto da divisão (Módulo) | `x %% y`  |
|   %/%    |      Divisão inteira      | `x %/% y` |


## Assinando objetos {.smaller}

Caso você queira guardar valores ou diferentes itens na linguagem R, você pode utilizar o sinal de `=` ou `<-`. Assim, essa é podemos atribuir valores para dois objetos, `y` e `x`:

```{r eval=TRUE}
x <- 3
y <- 5
```

Assim, o objeto $x$ e $y$ tem os valores 3 e 5 atribuído a eles, respectivamente. Agora é possível fazer cálculos matemáticos:

```{r eval=TRUE}
x + y
```

É possível utilizar os outros dois objetos para criar outro a partir deles:

```{r eval=TRUE}
z <- x / y
z
```

# Estrutura de dados em R {.smaller}

Uma estrutura de dados é uma forma particular de se organizar dados em um computador para que possam ser utilizados de forma efetiva. Dessa forma, no R existem 5 estruturas de dados diferentes: vetores, dataframes, matrizes, arrays e factors. No entanto, existem dois tipos vetores distintos, listas e vetores atômicos. A lista é uma estrutura de dados heterogênea e o vetor atômico deve ser homogêneo. Uma estrutura de dados heterogênea suporta elementos com qualquer estrutura de dados. Assim, uma lista pode conter elementos do tipo vetor atômico, dataframe, matriz, array ou fator. Por outro lado, uma estrutura de dados homogênea suporta apenas elementos do mesmo tipo. Logo, um vetor atômico com um elemento do tipo matriz só pode conter elementos do tipo matriz.

# Estrutura de dados em R

: Resumo das estruturas de dados

| Estrutura de Dados | Homogêneo |
|:------------------:|:---------:|
|    Vetor Atômico   |    Sim    |
|        Lista       |    Não    |
|       Matriz       |    Sim    |
|        Array       |    Sim    |
|      Dataframe     |    Não    |
|       Fatores      |    Não    |

# Vetores

## Vetores Atômicos

Vetores atômicos é uma das estruturas mais amplamente utilizadas no R. Vetor atômico é uma sequência de elementos do mesmo tipo (`homogêneo`), como números, caracteres, valores lógicos ou outro tipo de elemento. Além disso, os vetores atômicos permitem operações elemento a elemento, o que torna o código mais conciso e mais fácil de ler.

## Como criar um vetor atômico {.smaller}

Os vetores atômicos podem ser criados utilizando a função `c()`. Por exemplo, você pode criar um objeto chamado meu vetor que tem como atributo um vetor atômico:

```{r eval=TRUE}
meu_vetor <- c(1, 3, 1, 42)
meu_vetor
```

Vetores atômico podem ser cálculos ou diferentes valores atribuídos a objetos, incluindo vetores atômicos:

```{r eval=TRUE}
valorqualquer <- 5
meu_vetor2 <- c(3, -3, 2, 3.45, 1e+03, 64^0.5, 2+(3-1.1)/9.44, valorqualquer)
meu_vetor2
```

Você pode também juntar vetores:

```{r eval=TRUE}
vetores_juntos <- c(meu_vetor, meu_vetor2)
```

## Extraindo valores de um vetor atômico {.smaller}

Você pode ter notado valores entre colchetes na saída do código que aparecem dessa forma [i], em que i é um número inteiro. Essa notação indica a posição dos elementos de um vetor atômico. Assim, considerando o vetor `meu_vetor2`, podemos selecionar o segundo elemento da seguinte forma:

```{r eval=TRUE}
meu_vetor2[2]
```

Caso não saibamos a quantidade de elementos num vetor e queira obter a quantidade total de elementos num vetor atômico, podemos utilizar a função `length()`:

```{r eval=TRUE}
length(meu_vetor2)
```

## Extraindo valores de um vetor atômico {.smaller}

Dessa forma, podemos selecionar o último elemento do vetor `meu_vetor2` utilizando a função `length`:

```{r eval=TRUE}
meu_vetor2[length(meu_vetor2)]
```

É possível também selecionar todos os elementos de um vetor atômico, exceto um. Veja um exemplo selecionando todos os valores do vetor `meu_vetor2`, exceto o último:

```{r eval=TRUE}
meu_vetor2[-length(meu_vetor2)]
```

## Extraindo valores de um vetor atômico {.smaller}

É possível também selecionar mais de um elemento utilizando sequências que pode ser criado com `:`. Podemos criar uma sequência de 2 a 5:

```{r, eval=TRUE}
2:5
```

Assim selecionando os valores de 2 a 5 do vetor `meu_vetor2`:

```{r eval=TRUE}
meu_vetor2[2:5]
```

Os vetores atômicos também podem ser utilizados para selecionar elementos. Selecionando o quarto e sexto elemento:

```{r eval=TRUE}
meu_vetor2[c(4, 6)]
```

Removendo o quarto e sexto elemento:

```{r eval=TRUE}
meu_vetor2[-c(4, 6)]
```

## Substituindo elementos de vetores atômicos {.smaller}

É possível também substituir os elementos de um vetor atômico utilizando a sua posição. Veja um exemplo:

```{r eval=TRUE}
# reescrevendo o segundo elemento de `meu_vetor2` por um caracter

meu_vetor2[2]  <- "Gabriel"
meu_vetor2
```

Perceba que agora que todos os elementos do vetor convergem para caracter. É possível perceber isso pelas `"`.

Substituindo do segundo ao quarto valor:

```{r eval=TRUE}
meu_vetor2[2:4] <- c("Paulo", "Ataline", "Gabriel")
meu_vetor2
```

## Listas

## Dataframes

# Tidyverse

## O que é o Tidyverse

O tidyverse é uma coleção de pacotes que facilita os processos básicos de um projeto ou análise de ciência de dados. Além disso, os pacotes que o compõe possuem uma sintaxe comum, o que torna a aplicação de métodos de análise de dados mais consistente e intuitiva. O tidyverse inclui pacotes para visualização, limpeza de dados, manipulação de datas, importação de dados e manipulação de strings.

## Como importar um banco de dados {.smaller}

O pacote do tidyverse que serve para importação de banco de dados, é o `readr`. Por exemplo, podemos utilizar a função `read_csv` para ler um arquivo `.csv`. Veja um exemplo com dados de Chuva:

```{r echo=TRUE}
library(dplyr)
library(readr)
```

```{r eval=TRUE}
df <- read_csv("chuva.csv")
head(df)
```

## Lidando com datas

```{r eval=TRUE}
df <- df |>
  mutate(
    Data = as.Date(Data, format = "%d/%m/%Y"),
    Ano = year(Data),
    Mês = month(Data),
    Dia = day(Data)
    ) |>
    drop_na(Data)
head(df)
```

## Calculando os acumulados

```{r eval=TRUE}
df  <- df |>
  select(- Dia)

df <- df |>
  pivot_longer(
    cols = starts_with("Chuva"),
    names_to = "Dia",
    values_to = "Chuva"
  ) |>
  mutate(Dia = as.double(str_replace(Dia, "Chuva", ""))) |>
  arrange(Data, Dia)

head(df)
```


```{r eval=TRUE}
final  <- as.Date("2019-01-01")

df <- df |>
  filter(between(Data, final - days(360), final)) |>
  mutate(Acumulado = cumsum(Chuva))
```
