---
title: Introdução à linguagem de programação R
author: Gabriel de Jesus Pereira
Date: today
execute:
  refresh: true
  warning: false
  error: false
  echo: true
revealjs-plugins:
  - attribution
  - roughnotation
  - pointer
format:
  revealjs:
    code-copy: true
    theme: [default, style.scss]
    embed-resources: true
    transition: slide
    background-transition: fade
    scrollable: true
    preview-links: auto
editor:
  markdown:
    wrap: 72
lang: pt-br
eval: false
---


# O que são pacotes

## O que são pacotes {.smaller}

A linguagem base do R vem com inúmeras funções implementadas para operações numéricas, análise estatística, gráficos para visualização e muitos outros. Essas funções da própria linguagem são conhecidas como **built-in**. No entanto, é possível utilizar funcionalidades implementadas por outros usuários da linguagem. Para isso, podemos instalar pacotes.

Os pacotes em R e muitas outras linguagens são um conjunto de funcionalidades implementadas por usuários da própria linguagem. Por exemplo, um dos pacotes mais conhecidos para visualização de gráficos é o **ggplot2**, que foi implementada por Hadley Wickham. Este pacote implementa uma série de funções para visualização estatística, permitindo criar Box-plots, gráficos de dispersão, gráficos de linhas e uma miríade de outros gráficos.

# Como instalar pacotes

## Como instalar pacotes {.smaller}

Existe uma função principal para instalação de pacotes: *install.packages*. Você pode verificar sua documentação digitando *?install.packages*^[Obs: Utilizar *?* antes do nome de uma função no R é uma forma de olhar a documentação de uma função e obter informações sobre sua funcionalidade. Caso você queira pesquisar afundo no *sistema de ajuda* do R, você pode utilizar *??* antes do nome de uma função e irá procurar em diferentes pacotes funções com aquele mesmo nome. A função *help* é o mesmo que utilizar *?*.] no seu console do R. Dessa forma, podemos instalar o pacote *ggplot2* da seguinte forma:

```{r output=FALSE}
install.packages("ggplot2")
```

Agora que o pacote foi instalado, você pode utilizar suas funções chamando ele com a função *library*. A função *library* carrega
todos as funções implementadas num pacote. Assim, temos:

```{r output=FALSE}
library(ggplot2)
```

# Operações matemáticas básicas

## Operações matemáticas básicas {.smaller}

A linguagem de programação R tem implementado 7 operações matemáticas básicas implementadas na linguagem, além de suportar uma grande quantidade de funções matemáticas que permitem realizar operações mais complexas. Por exemplo, caso queira calcular o $\ln\left(10\right)$, podemos utilizar a função $\log\left(\right)$. Veja um exemplo:

```{r eval=TRUE, echo=TRUE}
log(10)
```

Com a função $\exp\left(\right)$ é possível calcular a função exponencial $\left(e^x\right)$. Assim, calculando $e^2$:

```{r eval=TRUE}
exp(2)
```


## Operações matemáticas básicas {.smaller}

: Resumo das operações matemáticas

| Operação |           Nome            |  Exemplo  |
| :------: | :-----------------------: | :-------: |
|    +     |          Adição           |  `x + y`  |
|    -     |         Subtração         |  `x - y`  |
|    *     |       Multiplicação       |  `x * y`  |
|    /     |          Divisão          |  `x / y`  |
|    ^     |         Expoente          |  `x ^ y`  |
|    %%    | Resto da divisão (Módulo) | `x %% y`  |
|   %/%    |      Divisão inteira      | `x %/% y` |

## Operações de comparação

Os operadores de comparação são utilizados para comparar dois valores

| Operadores | Nome | Exemplo |
|:---:|:---:|:---:|
| == | Igual | `x == y` |
| != | Não é igual | `x != y ` |
| > | Maior que | `x > y` |
| < | Menor que | `x < y` |
| >= | Maior ou igual que | `x >= y`  |
| <= | Menor ou igual que | `x <= y ` |

## Operações lógicas {.smaller}

Operadores lógicos são usados para combinar declarações condicionais:

| Operadores | Nome |
|:---:|:---:|
| & | Retorna TRUE se os dois elementos sao verdadeiros |
| && | Retorna TRUE se ambas as afirmações forem verdadeiras. |
| \| | Ele retorna TRUE se uma das afirmações for verdadeira. |
| \|\| | Ele retorna TRUE se uma das afirmações for verdadeira. |
| ! |  Retorna FALSE se a afirmaçao for verdadeira |

## Assinando objetos {.smaller}

Caso você queira guardar valores ou diferentes itens na linguagem R, você pode utilizar o sinal de `=` ou `<-`. Assim, essa é podemos atribuir valores para dois objetos, `y` e `x`:

```{r eval=TRUE}
x <- 3
y <- 5
```

Assim, o objeto $x$ e $y$ tem os valores 3 e 5 atribuído a eles, respectivamente. Agora é possível fazer cálculos matemáticos:

```{r eval=TRUE}
x + y
```

É possível utilizar os outros dois objetos para criar outro a partir deles:

```{r eval=TRUE}
z <- x / y
z
```

# Estrutura de dados em R {.smaller}

Uma estrutura de dados é uma forma particular de se organizar dados em um computador para que possam ser utilizados de forma efetiva. Dessa forma, no R existem 5 estruturas de dados diferentes: vetores, dataframes, matrizes, arrays e factors. No entanto, existem dois tipos vetores distintos, listas e vetores atômicos. A lista é uma estrutura de dados heterogênea e o vetor atômico deve ser homogêneo. Uma estrutura de dados heterogênea suporta elementos com qualquer estrutura de dados. Assim, uma lista pode conter elementos do tipo vetor atômico, dataframe, matriz, array ou fator. Por outro lado, uma estrutura de dados homogênea suporta apenas elementos do mesmo tipo. Logo, um vetor atômico com um elemento do tipo matriz só pode conter elementos do tipo matriz.

# Estrutura de dados em R

: Resumo das estruturas de dados

| Estrutura de Dados | Homogêneo |
|:------------------:|:---------:|
|    Vetor Atômico   |    Sim    |
|        Lista       |    Não    |
|       Matriz       |    Sim    |
|        Array       |    Sim    |
|      Dataframe     |    Não    |
|       Fatores      |    Não    |

# Vetores

## Vetores Atômicos

Vetores atômicos é uma das estruturas mais amplamente utilizadas no R. Vetor atômico é uma sequência de elementos do mesmo tipo (`homogêneo`), como números, caracteres, valores lógicos ou outro tipo de elemento. Além disso, os vetores atômicos permitem operações elemento a elemento, o que torna o código mais conciso e mais fácil de ler.

## Como criar um vetor atômico {.smaller}

Os vetores atômicos podem ser criados utilizando a função `c()`. Por exemplo, você pode criar um objeto chamado meu vetor que tem como atributo um vetor atômico:

```{r eval=TRUE}
meu_vetor <- c(1, 3, 1, 42)
meu_vetor
```

Vetores atômico podem ser cálculos ou diferentes valores atribuídos a objetos, incluindo vetores atômicos:

```{r eval=TRUE}
valorqualquer <- 5
meu_vetor2 <- c(3, -3, 2, 3.45, 1e+03, 64^0.5, 2+(3-1.1)/9.44, valorqualquer)
meu_vetor2
```

Para criar um vetor atômico de inteiros, basta utilizar o sufixo L. Além disso, podemos criar também um vetor lógico ou de sequência de caracteres:

```{r}
meu_vetor_inteiro <- c(1L, 6L, 10L)
meu_vetor_de_caracter <- c("string", "outra_string2")
meu_vetor_logico <- c(TRUE, FALSE, T, F)
```

Você pode também juntar vetores:

```{r eval=TRUE}
vetores_juntos <- c(meu_vetor, meu_vetor2)
```

## Como criar um vetor atômico

`Importante: Note que atribuições da forma objeto <- valor faz com que objeto seja um vetor de uma única posição.`

```{r eval=TRUE}
a <- 7L
a[1]
```

## Extraindo valores de um vetor atômico {.smaller}

Você pode ter notado valores entre colchetes na saída do código que aparecem dessa forma [i], em que i é um número inteiro. Essa notação indica a posição dos elementos de um vetor atômico. Assim, considerando o vetor `meu_vetor2`, podemos selecionar o segundo elemento da seguinte forma:

```{r eval=TRUE}
meu_vetor2[2]
```

Caso não saibamos a quantidade de elementos num vetor e queira obter a quantidade total de elementos num vetor atômico, podemos utilizar a função `length()`:

```{r eval=TRUE}
length(meu_vetor2)
```

## Extraindo valores de um vetor atômico {.smaller}

Dessa forma, podemos selecionar o último elemento do vetor `meu_vetor2` utilizando a função `length`:

```{r eval=TRUE}
meu_vetor2[length(meu_vetor2)]
```

É possível também selecionar todos os elementos de um vetor atômico, exceto um. Veja um exemplo selecionando todos os valores do vetor `meu_vetor2`, exceto o último:

```{r eval=TRUE}
meu_vetor2[-length(meu_vetor2)]
```

## Extraindo valores de um vetor atômico {.smaller}

É possível também selecionar mais de um elemento utilizando sequências que pode ser criado com `:`. Podemos criar uma sequência de 2 a 5:

```{r, eval=TRUE}
2:5
```

Assim selecionando os valores de 2 a 5 do vetor `meu_vetor2`:

```{r eval=TRUE}
meu_vetor2[2:5]
```

Os vetores atômicos também podem ser utilizados para selecionar elementos. Selecionando o quarto e sexto elemento:

```{r eval=TRUE}
meu_vetor2[c(4, 6)]
```

Removendo o quarto e sexto elemento:

```{r eval=TRUE}
meu_vetor2[-c(4, 6)]
```

## Substituindo elementos de vetores atômicos {.smaller}

É possível também substituir os elementos de um vetor atômico utilizando a sua posição. Veja um exemplo:

```{r eval=TRUE}
# reescrevendo o segundo elemento de `meu_vetor2` por um caracter

meu_vetor2[2]  <- "Gabriel"
meu_vetor2
```

Perceba que agora que todos os elementos do vetor convergem para caracter. É possível perceber isso pelas `"`.

Substituindo do segundo ao quarto valor:

```{r eval=TRUE}
meu_vetor2[2:4] <- c("Paulo", "Ataline", "Gabriel")
meu_vetor2
```

## Funções importantes para vetores {.smaller}

As funções a seguir servem para checar o tipo de dados de um vetor e retorna TRUE se for verdade ou FALSE, caso contrário. A única função que não testa o tipo de dados mas sim a estrutura de dados é a função is.atomic(), que serve para testar se é um vetor atômico.

**Ex:** is.character(). Checa se é um vetor de caracteres;

**Ex:** is.double(). Checa se é um vetor de números reais;

**Ex:** is.integer(). Checa se é um vetor de inteiros;

**Ex:** is.logical(). Checa se é um vetor de valores lógicos;

**Ex:** is.atomic(). Checa se é um vetor atômico

## Funções para conversão de tipo de vetores {.smaller}

Existem funções para mudar o tipo de dados dos vetores. Por exemplo, se tivermos um vetor y do tipo double, podemos converter ele para o tipo caracter com a função as.character():

```{r eval=TRUE}
y <- c(1.2, 1.4, 1.5)
as.character(y)
```

De forma similar, podemos converter o para double, lógico ou inteiro da seguinte forma:

```{r eval=TRUE}
as.integer(y)
as.logical(y)
as.double(y)
```

## Funções matemáticas e estatísticas para vetores {.smaller}

| Função em R | Finalidade |
|:---:|:---:|
| sum(x) | Retorna a soma do vetor x |
| mean(x) | Retorna a média do vetor x |
| median(x) | Retorna a mediana do vetor x |
| abs(x) | Retorna o vetor com os valores absolutos |
| sqrt(x) | Retorna o vetor com as raizes quadradas |
| sort(x) | Retorna o vetor x ordenado de forma crescente |
| sort(x, decreasing = TRUE) | Retorna o vetor x ordenado de forma decrescente |
| exp(x) | Retorna o vetor exponencial |
| log(x) | Retorna o vetor logaritmo natural |
| log(x, base = 10) | Retorna o vetor com o logaritmo na base 10 |
| sin(x), cos(x), tan(x) | Retorna o vator com resultados trigonométricos |
| length(x) | Cardinalidade do vetor x |
| factorial(x) | Fatorial dos elementos de x |
| choose(3, 2) | Combinacao tres, dois a dois |
| summary(x) | Medidas descritivas do vetor x |


## Listas {.smaller}

As listas são semelhantes aos vetores atômicos, com a diferença de que podem conter elementos de diferentes tipos e estruturas de dados:

```{r eval=TRUE}
minha_lista <- list(
  42,
  "Olá, mundo!",
  c(1, 2, 3, 4, 5),
  matrix(1:9, nrow = 3),
  list(a = 10, b = 20)
)
minha_lista
```

## Listas {.smaller}

É possível também nomear os elementos de uma lista e acessar seus elementos pelo nome:

```{r eval=TRUE}
minha_lista2 <- list(
  numero = 42,
  texto = "Olá, mundo!",
  vetor = c(1, 2, 3, 4, 5),
  matriz = matrix(1:9, nrow = 3),
  sublista = list(a = 10, b = 20)
)
minha_lista2
```

## Acessando e modificando nomes de uma lista {.smaller}

Os nomes de uma lista com elementos nomeados podem ser acessados utilizando a função `names()` e para modificar os nomes, basta passar um vetor atômico com os nomes modificados:

```{r eval=TRUE}
minha_lista3 <- minha_lista2

# Nomes originais

names(minha_lista3)

names(minha_lista3) <- c(
  "nome_modificado1", "nome_modificado2",
  "nome_modificado3", "nome_modificado4",
  "nome_modificado5")

# Nomes modificados

names(minha_lista3)
```

O mesmo vale para vetores atômicos nomeados. Para criar um vetor atômico nomeado basta nomear os elementos como em uma lista:

```{r eval=TRUE}
atomico_nomeado <- c(b = "sim", c = "valor2", d = "valor3")
atomico_nomeado
names(atomico_nomeado)
```

## Acessando elementos de uma lista {.smaller}

Para acessar elementos de uma lista, é semelhante aos vetores atômicos. Caso seja uma lista sem nomes, basta utilizar colchetes duplos e passar a posição. Veja um exemplo acessando o primeiro elementos da lista `minha_lista`:

```{r eval=TRUE}
minha_lista[[1]]
```

```{r eval=TRUE}
minha_lista[1:3]
```

## Acessando elementos de uma lista {.smaller}

Acessando pelo nome na lista `minha_lista2`:

```{r eval=TRUE}
minha_lista2$vetor
```

É possível também acessar o elemento com os colchetes duplos:

```{r eval=TRUE}
minha_lista2[["vetor"]]
```

As operações lógicas para acessar elementos de um vetor atômico continua valendo para um vetor do tipo lista:

```{r eval=TRUE}
minha_lista2[minha_lista2 == "Olá, mundo!"]
```

## Mais funções importantes para vetores {.smaller}

Existem três funções importantes para vetores, a função `str` que permite checar a estrutura de um tipo de dado. Por exemplo, se utilizarmos numa lista, ela mostrara o tipo de dados da lista:

```{r eval=TRUE}
# O primeiro valor é numérico, o segundo é caracter, o terceiro é um vetor atômico e o último é uma lista nomeada de 2 elementos

str(minha_lista2)
```

Outra função importante é a `is.list` que serve para checar se um objeto é uma lista e retorna o valor lógico TRUE, se for verdade, e FALSE caso contrário.

```{r eval=TRUE}
is.list(minha_lista2)
```

Por último, para transformar uma lista em um vetor atômico, podemos utilizar a função `unlist()`:

```{r}
unlist(minha_lista2)
```

## Exercícios de vetores

Exercício: Construa um vetor de números pares de 2 a 100 e um outro vetor de números ímpares de números de 1 a 99. **Dica: um número par é divisível por 2, ou seja, o resto da divisão seria zero. Caso contrário, o número é ímpar.**

## Exercícios de vetores

Exercício: Construa uma sequência de números no intervalo fechado [1, 100] por intervalos de comprimento 0.1. Construa uma outra sequência no intervalo fechado [1, 100] com 37 elementos.  **Dica: utilize a função `seq()`. Consulte a sua documentação com ?seq**

## Exercícios de vetores

Exercício: Corra o código abaixo e entenda assimile as saídas.

```{r eval=TRUE}
l <- c(list(c(3,2),"a"),c(1,2))
str(l)

m <- list(list(c(3,2),"a"),c(1,2))
str(m)
```

## Data Frames

O Data Frame é a estrutura de dados em R que representam os dados como uma tabela. Assim como as listas, eles podem ter elementos de diferentes tipos de dados, mas os elementos de suas colunas devem ser do mesmo tipo.

## Como criar um Data Frame {.smaller}

Para a criação de um Data Frame, podemos utilizar a função `data.frame`. Veja um exemplo:

```{r eval=TRUE}
meu_dataframe <- data.frame(
  pessoa = c("Bruce", "Dr. Manhattan", "Simone"),
  idade = c(30, 43, 45),
  Sexo = factor(c("M", "M", "F"))
)
meu_dataframe
```

Podemos acessar os elementos de um dataframe abrindo colchetes e passando a posição da linha pra a primeira posição e da coluna para a segunda posição `[linha, coluna]`:

```{r eval=TRUE}
# acessa a segunda linha e segunda coluna

meu_dataframe[2, 2]

# acessa da segunda a terceira linha da terceira coluna

meu_dataframe[2:3, 3]

# acessa todas as linhas, mas apenas a coluna 3 e 1

meu_dataframe[, c(3, 1)]

# acessa todas as linhas, mas remove a terceira e primeira coluna e mantém todas as outras

meu_dataframe[, -c(3, 1)]

# Acessando pelo nome

meu_dataframe[, c("pessoa", "idade")]

# Acessando elementos de uma linha com operações lógicas

meu_dataframe[meu_dataframe$idade < 45,]
```

## Acessando elementos de um Data Frame {.smaller}

Você também pode acessar os vetores passados para o data frame utilizando o nome da coluna:

```{r eval=TRUE}
meu_dataframe$pessoa
```

Para saber a quantidade de dimensões, linhas e colunas um data frame tem, podemos utilizar a função `dim`, `nrow` e `ncol`:

```{r eval=TRUE}
dim(meu_dataframe)
nrow(meu_dataframe)
ncol(meu_dataframe)
```

Podemos também acessar o nome das colunas com a função `colnames`. Além disso, a modificação do nome das colunas segue o mesmo padrão de uma lista ou vetor atômico nomeado:

```{r eval=TRUE}
nomeia_df <- meu_dataframe
colnames(nomeia_df)

colnames(nomeia_df) <- c("modifica1", "modifica2", "modifica3")
nomeia_df
```

## Combinando Data Frames {.smaller}

A função `rbind` serve para unir dois data frames (ou matrizes) por linha, ou por coluna com a função `cbind`:

```{r eval=TRUE}
meu_dataframe2 <- data.frame(
  pessoa="Brian",
  idade=7,
  Sexo=factor("M",levels=levels(meu_dataframe$Sexo))
  )

# Juntando por linha

rbind(meu_dataframe, meu_dataframe2)
```

## Combinando Data Frames {.smaller}

Agora, utilizando a função `rbind`, podemos combinar dois data frames como se estivessemos adicionando novas variáveis ao banco de dados:

```{r eval=TRUE}
meu_dataframe3 <- data.frame(
  sobrenome = c("Wayne", "Osterman", "Pereira"),
  filme = c("Batman", "Watchman", NA)
)

cbind(meu_dataframe, meu_dataframe3)
```

Podemos adicionar variáveis utilizando o cifrão:

```{r eval=TRUE}
meu_dataframe3$quadrinhos <- c("Sim", "Sim", "Não")
meu_dataframe3
```

## Checando se é data frame

Para checar se é um objeto é da estrutura de dado do tipo dataframe, podemos utilizar a função `is.data.frame`. Assim como as outras funções desse tipo, ela retorná TRUE para saber se for verdade e FALSE, caso contrário:

```{r eval=TRUE}
is.data.frame(meu_dataframe3)
```

## Exercícios de Data Frame

Exercício: Um professor irá criar um data frame para armazenar as notas de 5 alunos de sua turma em que cada aluno poderá ter realizado no máximo 3 avaliações. Crie um data frame com duas colunas sendo a primeira com os nomes dos alunos e a segunda com as notas das avaliações.

## Exercícios de Data Frame {.smaller}

Exercício: Inicialmente, crie a lista abaixo:
notas <- list(aluno_1 = c(7.1, 3.2, NA),
aluno_2 = c(2.7, 8.8, 10.0),
aluno_3 = c(0.0, NA, NA),
aluno_4 = c(7.7, 8.4, 6.3),
aluno_5 = c(3.6, 6.6, 8.1),
aluno_6 = c(NA, NA, NA),
aluno_7 = c(7.4, 7.1, 7.3),
aluno_8 = c(10.0, NA, 7.0),
aluno_9 = c(1.6, 3.2, 5.3),
aluno_10 = c(8.8, 9.2, 8.0))

**a)** Crie o vetor status contendo o status dos dez alunos.
Considere: A (aprovado), REP (reprovado), F (final). Dica:
Considere as regras de nossa instituição.

**b)**: Crie o vetor alunos com os nomes dos alunos. Considere os
nome fictício Aluno_1 para o primeiro aluno e de forma
análoga para os demais alunos. Crie esse vetor utilizando a
função paste().

**c)**: Construa um data frame de nome histórico com as variáveis
nomes, notas e status.


**d)**: Com base no data frame de nome historico, construa um
outro data frame com o nome aprovados com os alunos
aprovados. De forma análoga para os demais status.

**e)**: Suponha que o professor est´a interessado em saber quais
alunos foram ou tem alguma chance de assumir o status de
aprovado. Construa o data frame de nome bons alunos com
estes alunos.

**f)**: Modifique os nomes das linhas do data frame historico
colocando id 1 na primeira linha e respectivamente no mesmo
padr˜ao para as demais linhas.

**g)**: Obtenha por meio do data frame de nome historico um novo
data frame (historico na) com os alunos que deixaram ao
menos uma prova para repor.

**h)**: Apenas para os alunos que fizeram as três avaliações, obtenha uma média aritmética das avaliações. Acrescente a variável de
nome media no data frame historico.

## Exercícios de Data Frame {.smaller}

Exercício: Utilizando o conjunto de dados de nome state.x77
responda os itens abaixo:

**Para acessar o conjunto de dados state.x77 basta digitar state.x77, ele já vem carregado no R**

a) Construa o data frame dados a partir de state.x77.

b) Obtenha um data frame de nome dados 1 com as observações
de dados que possua população maior que 4246, isto é, com
os estados estadunidenses que possua uma população maior
que 4246 (quatro milhões duzentos e quarenta e seis mil).

c) Obtenha o data frame dados 2 com as observações
população maior que 4246 e menores que 8 milhões, isto é,
menor que 8000.

d) Obtenha o vetor estados c com os nomes dos estados que
obedecem os critérios do item c.

e) Construa o data frame dados 3 com os estados
estadunidenses com população maior que 1.5 vezes a média
dos 50 estados considerados. Obtenha o vetor com o nome
dos estados que obedecem essa regra.

f) Construa o data frame dados 4 com os estados
estadunidenses com população maior que duas vezes a
mediana dos 50 estados e que tenha uma população com
expectativa de vida maior que 71.84 anos.

g) Obtenha o data frame dados 5 com os estados
estadunidenses com renda maior que a média nacional,
expectativa de vida maior que 72 anos.

h) Adicione ao data frame dados duas linhas com a média de
todas as variáveis e variâncias, respectivamente.

<!-- ## Controle de fluxo

## Instrução if {.smaller}

Uma instrução *if* pode ser definida da seguinte forma:

```{r eval=FALSE}
 if (condição) {
  escreva o código aqui...
}
```

Caso a condição seja TRUE, o código que está dentro das chaves será executado.

Veja um exemplo:

```{r eval=TRUE}
a <- 3
b <- 4

if(a <= b) {
  a <- a ^ 2
}
a
```

Como a condição de que `a <= b` é verdadeira, o código que está dentro das chaves é executado, elevando `a` ao quadrado.P

## Funções

## Funções especiais

# Tidyverse

## O que é o Tidyverse

O tidyverse é uma coleção de pacotes que facilita os processos básicos de um projeto ou análise de ciência de dados. Além disso, os pacotes que o compõe possuem uma sintaxe comum, o que torna a aplicação de métodos de análise de dados mais consistente e intuitiva. O tidyverse inclui pacotes para visualização, limpeza de dados, manipulação de datas, importação de dados e manipulação de strings.

## Como importar um banco de dados {.smaller}

O pacote do tidyverse que serve para importação de banco de dados, é o `readr`. Por exemplo, podemos utilizar a função `read_csv` para ler um arquivo `.csv`. Veja um exemplo com dados de Chuva:

```{r echo=TRUE, eval=TRUE}
library(tidyverse)
```

Com a função `head` podemos ver as primeiras *n* linhas do banco de dados. Por padrão n = 6:

```{r eval=TRUE}
df <- read_csv("chuva.csv")
head(df)
```

## Lidando com datas

A coluna de data não está no formato ideal para o R ler como um tipo de dado, ela está representada como um caractere. Veja pelos primeiros elementos de seu vetor:

```{r eval=TRUE}
head(df$Data)
```

Assim, precisamos transformar essa coluna para o tipo data para que possamos trabalhar com ela. A função `as.Date` do *R* base serve para transformar um valor para o tipo data.

## Lidando com datas {.smaller}

Assim, para reescrever a coluna Data para o tipo de dados data, podemos simplesmente utilizar a função `mutate` do pacote `dplyr`. Na função `as.Date` passamos o formato que está a data para o argumento `format`. Logo, temos que o formato deve ser `%d/%m/%Y`, representando os dias, meses e anos:

```{r eval=TRUE}
df <- df |>
  mutate(
    Data = as.Date(Data, format = "%d/%m/%Y"),
    Ano = year(Data),
    Mês = month(Data),
    Dia = day(Data)
    ) |>
    drop_na(Data)

head(df)
```

## Lidando com datas {.smaller}

Agora que temos a coluna data no formato correto, podemos inserir também o ano, mês e dia como colunas do banco de dados:

**A função `select` serve para selecionar variáveis do banco de dados**

```{r eval=TRUE}
df <- df |>
  mutate(
    Ano = year(Data),
    Mês = month(Data),
    Dia = day(Data)
  )

df |>
  select(c(Ano, Mês, Dia)) |>
  head()
```

## Calculando os acumulados

```{r eval=TRUE}
df <- df |>
  select(- Dia)

df <- df |>
  pivot_longer(
    cols = starts_with("Chuva"),
    names_to = "Dia",
    values_to = "Chuva"
  ) |>
  mutate(Dia = as.double(str_replace(Dia, "Chuva", ""))) |>
  arrange(Data, Dia)

head(df)
```


```{r eval=TRUE}
final  <- as.Date("2019-04-01")
```


```{r}
acumulados <- function(dados, data_final) {
  dados <- dados |>
    mutate(
      Período = between(Data, data_final - days(360), data_final)
    )
  acumulado <- rep(NA, times = nrow(dados))
  pos <- which(dados$Período)
  acumulado[pos[8:length(pos)]] <- cumsum(teste$Chuva[pos[8:length(pos)]])

  dados |>
    mutate(Acumulado = acumulado)
}
```

## Visualização de dados com ggplot a -->
