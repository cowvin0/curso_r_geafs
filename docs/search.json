[
  {
    "objectID": "gabriel_curso_r.html#o-que-são-pacotes-1",
    "href": "gabriel_curso_r.html#o-que-são-pacotes-1",
    "title": "Introdução à linguagem de programação R",
    "section": "O que são pacotes",
    "text": "O que são pacotes\nA linguagem base do R vem com inúmeras funções implementadas para operações numéricas, análise estatística, gráficos para visualização e muitos outros. Essas funções da própria linguagem são conhecidas como built-in. No entanto, é possível utilizar funcionalidades implementadas por outros usuários da linguagem. Para isso, podemos instalar pacotes.\nOs pacotes em R e muitas outras linguagens são um conjunto de funcionalidades implementadas por usuários da própria linguagem. Por exemplo, um dos pacotes mais conhecidos para visualização de gráficos é o ggplot2, que foi implementada por Hadley Wickham. Este pacote implementa uma série de funções para visualização estatística, permitindo criar Box-plots, gráficos de dispersão, gráficos de linhas e uma miríade de outros gráficos."
  },
  {
    "objectID": "gabriel_curso_r.html#como-instalar-pacotes-1",
    "href": "gabriel_curso_r.html#como-instalar-pacotes-1",
    "title": "Introdução à linguagem de programação R",
    "section": "Como instalar pacotes",
    "text": "Como instalar pacotes\nExiste uma função principal para instalação de pacotes: install.packages. Você pode verificar sua documentação digitando ?install.packages1 no seu console do R. Dessa forma, podemos instalar o pacote ggplot2 da seguinte forma:\n\ninstall.packages(\"ggplot2\")\n\nAgora que o pacote foi instalado, você pode utilizar suas funções chamando ele com a função library. A função library carrega todos as funções implementadas num pacote. Assim, temos:\n\nlibrary(ggplot2)\n\nObs: Utilizar ? antes do nome de uma função no R é uma forma de olhar a documentação de uma função e obter informações sobre sua funcionalidade. Caso você queira pesquisar afundo no sistema de ajuda do R, você pode utilizar ?? antes do nome de uma função e irá procurar em diferentes pacotes funções com aquele mesmo nome. A função help é o mesmo que utilizar ?."
  },
  {
    "objectID": "gabriel_curso_r.html#operações-matemáticas-básicas-1",
    "href": "gabriel_curso_r.html#operações-matemáticas-básicas-1",
    "title": "Introdução à linguagem de programação R",
    "section": "Operações matemáticas básicas",
    "text": "Operações matemáticas básicas\nA linguagem de programação R tem implementado 7 operações matemáticas básicas implementadas na linguagem, além de suportar uma grande quantidade de funções matemáticas que permitem realizar operações mais complexas. Por exemplo, caso queira calcular o \\(\\ln\\left(10\\right)\\), podemos utilizar a função \\(\\log\\left(\\right)\\). Veja um exemplo:\n\nlog(10)\n\n[1] 2.302585\n\n\nCom a função \\(\\exp\\left(\\right)\\) é possível calcular a função exponencial \\(\\left(e^x\\right)\\). Assim, calculando \\(e^2\\):\n\nexp(2)\n\n[1] 7.389056"
  },
  {
    "objectID": "gabriel_curso_r.html#operações-matemáticas-básicas-2",
    "href": "gabriel_curso_r.html#operações-matemáticas-básicas-2",
    "title": "Introdução à linguagem de programação R",
    "section": "Operações matemáticas básicas",
    "text": "Operações matemáticas básicas\n\nResumo das operações matemáticas\n\n\nOperação\nNome\nExemplo\n\n\n\n\n+\nAdição\nx + y\n\n\n-\nSubtração\nx - y\n\n\n*\nMultiplicação\nx * y\n\n\n/\nDivisão\nx / y\n\n\n^\nExpoente\nx ^ y\n\n\n%%\nResto da divisão (Módulo)\nx %% y\n\n\n%/%\nDivisão inteira\nx %/% y"
  },
  {
    "objectID": "gabriel_curso_r.html#operações-de-comparação",
    "href": "gabriel_curso_r.html#operações-de-comparação",
    "title": "Introdução à linguagem de programação R",
    "section": "Operações de comparação",
    "text": "Operações de comparação\nOs operadores de comparação são utilizados para comparar dois valores\n\n\n\nOperadores\nNome\nExemplo\n\n\n\n\n\nIgual\nx == y\n\n\n\nNao igual\nx != y\n\n\n\nMaior que\nx &gt; y\n\n\n\nMenor que\nx &lt; y\n\n\n\nMaior ou igual que\nx &gt;= y\n\n\n\nMenor ou igual que\nx &lt;= y"
  },
  {
    "objectID": "gabriel_curso_r.html#operações-lógicas",
    "href": "gabriel_curso_r.html#operações-lógicas",
    "title": "Introdução à linguagem de programação R",
    "section": "Operações lógicas",
    "text": "Operações lógicas\nOperadores lógicos são usados para combinar declarações condicionais:\n\n\n\nOperadores\nNome\n\n\n\n\n&\nRetorna TRUE se os dois elementos sao verdadeiros\n\n\n&&\nRetorna TRUE se ambas as afirmações forem verdadeiras.\n\n\n|\nEle retorna TRUE se uma das afirmações for verdadeira.\n\n\n||\nEle retorna TRUE se uma das afirmações for verdadeira.\n\n\n!\nRetorna FALSE se a afirmaçao for verdadeira"
  },
  {
    "objectID": "gabriel_curso_r.html#assinando-objetos",
    "href": "gabriel_curso_r.html#assinando-objetos",
    "title": "Introdução à linguagem de programação R",
    "section": "Assinando objetos",
    "text": "Assinando objetos\nCaso você queira guardar valores ou diferentes itens na linguagem R, você pode utilizar o sinal de = ou &lt;-. Assim, essa é podemos atribuir valores para dois objetos, y e x:\n\nx &lt;- 3\ny &lt;- 5\n\nAssim, o objeto \\(x\\) e \\(y\\) tem os valores 3 e 5 atribuído a eles, respectivamente. Agora é possível fazer cálculos matemáticos:\n\nx + y\n\n[1] 8\n\n\nÉ possível utilizar os outros dois objetos para criar outro a partir deles:\n\nz &lt;- x / y\nz\n\n[1] 0.6"
  },
  {
    "objectID": "gabriel_curso_r.html#vetores-atômicos",
    "href": "gabriel_curso_r.html#vetores-atômicos",
    "title": "Introdução à linguagem de programação R",
    "section": "Vetores Atômicos",
    "text": "Vetores Atômicos\nVetores atômicos é uma das estruturas mais amplamente utilizadas no R. Vetor atômico é uma sequência de elementos do mesmo tipo (homogêneo), como números, caracteres, valores lógicos ou outro tipo de elemento. Além disso, os vetores atômicos permitem operações elemento a elemento, o que torna o código mais conciso e mais fácil de ler."
  },
  {
    "objectID": "gabriel_curso_r.html#como-criar-um-vetor-atômico",
    "href": "gabriel_curso_r.html#como-criar-um-vetor-atômico",
    "title": "Introdução à linguagem de programação R",
    "section": "Como criar um vetor atômico",
    "text": "Como criar um vetor atômico\nOs vetores atômicos podem ser criados utilizando a função c(). Por exemplo, você pode criar um objeto chamado meu vetor que tem como atributo um vetor atômico:\n\nmeu_vetor &lt;- c(1, 3, 1, 42)\nmeu_vetor\n\n[1]  1  3  1 42\n\n\nVetores atômico podem ser cálculos ou diferentes valores atribuídos a objetos, incluindo vetores atômicos:\n\nvalorqualquer &lt;- 5\nmeu_vetor2 &lt;- c(3, -3, 2, 3.45, 1e+03, 64^0.5, 2+(3-1.1)/9.44, valorqualquer)\nmeu_vetor2\n\n[1]    3.000000   -3.000000    2.000000    3.450000 1000.000000    8.000000\n[7]    2.201271    5.000000\n\n\nVocê pode também juntar vetores:\n\nvetores_juntos &lt;- c(meu_vetor, meu_vetor2)"
  },
  {
    "objectID": "gabriel_curso_r.html#extraindo-valores-de-um-vetor-atômico",
    "href": "gabriel_curso_r.html#extraindo-valores-de-um-vetor-atômico",
    "title": "Introdução à linguagem de programação R",
    "section": "Extraindo valores de um vetor atômico",
    "text": "Extraindo valores de um vetor atômico\nVocê pode ter notado valores entre colchetes na saída do código que aparecem dessa forma [i], em que i é um número inteiro. Essa notação indica a posição dos elementos de um vetor atômico. Assim, considerando o vetor meu_vetor2, podemos selecionar o segundo elemento da seguinte forma:\n\nmeu_vetor2[2]\n\n[1] -3\n\n\nCaso não saibamos a quantidade de elementos num vetor e queira obter a quantidade total de elementos num vetor atômico, podemos utilizar a função length():\n\nlength(meu_vetor2)\n\n[1] 8"
  },
  {
    "objectID": "gabriel_curso_r.html#extraindo-valores-de-um-vetor-atômico-1",
    "href": "gabriel_curso_r.html#extraindo-valores-de-um-vetor-atômico-1",
    "title": "Introdução à linguagem de programação R",
    "section": "Extraindo valores de um vetor atômico",
    "text": "Extraindo valores de um vetor atômico\nDessa forma, podemos selecionar o último elemento do vetor meu_vetor2 utilizando a função length:\n\nmeu_vetor2[length(meu_vetor2)]\n\n[1] 5\n\n\nÉ possível também selecionar todos os elementos de um vetor atômico, exceto um. Veja um exemplo selecionando todos os valores do vetor meu_vetor2, exceto o último:\n\nmeu_vetor2[-length(meu_vetor2)]\n\n[1]    3.000000   -3.000000    2.000000    3.450000 1000.000000    8.000000\n[7]    2.201271"
  },
  {
    "objectID": "gabriel_curso_r.html#extraindo-valores-de-um-vetor-atômico-2",
    "href": "gabriel_curso_r.html#extraindo-valores-de-um-vetor-atômico-2",
    "title": "Introdução à linguagem de programação R",
    "section": "Extraindo valores de um vetor atômico",
    "text": "Extraindo valores de um vetor atômico\nÉ possível também selecionar mais de um elemento utilizando sequências que pode ser criado com :. Podemos criar uma sequência de 2 a 5:\n\n2:5\n\n[1] 2 3 4 5\n\n\nAssim selecionando os valores de 2 a 5 do vetor meu_vetor2:\n\nmeu_vetor2[2:5]\n\n[1]   -3.00    2.00    3.45 1000.00\n\n\nOs vetores atômicos também podem ser utilizados para selecionar elementos. Selecionando o quarto e sexto elemento:\n\nmeu_vetor2[c(4, 6)]\n\n[1] 3.45 8.00\n\n\nRemovendo o quarto e sexto elemento:\n\nmeu_vetor2[-c(4, 6)]\n\n[1]    3.000000   -3.000000    2.000000 1000.000000    2.201271    5.000000"
  },
  {
    "objectID": "gabriel_curso_r.html#substituindo-elementos-de-vetores-atômicos",
    "href": "gabriel_curso_r.html#substituindo-elementos-de-vetores-atômicos",
    "title": "Introdução à linguagem de programação R",
    "section": "Substituindo elementos de vetores atômicos",
    "text": "Substituindo elementos de vetores atômicos\nÉ possível também substituir os elementos de um vetor atômico utilizando a sua posição. Veja um exemplo:\n\n# reescrevendo o segundo elemento de `meu_vetor2` por um caracter\n\nmeu_vetor2[2]  &lt;- \"Gabriel\"\nmeu_vetor2\n\n[1] \"3\"                \"Gabriel\"          \"2\"                \"3.45\"            \n[5] \"1000\"             \"8\"                \"2.20127118644068\" \"5\"               \n\n\nPerceba que agora que todos os elementos do vetor convergem para caracter. É possível perceber isso pelas \".\nSubstituindo do segundo ao quarto valor:\n\nmeu_vetor2[2:4] &lt;- c(\"Paulo\", \"Ataline\", \"Gabriel\")\nmeu_vetor2\n\n[1] \"3\"                \"Paulo\"            \"Ataline\"          \"Gabriel\"         \n[5] \"1000\"             \"8\"                \"2.20127118644068\" \"5\""
  },
  {
    "objectID": "gabriel_curso_r.html#listas",
    "href": "gabriel_curso_r.html#listas",
    "title": "Introdução à linguagem de programação R",
    "section": "Listas",
    "text": "Listas\nAs listas são semelhantes aos vetores atômicos, com a diferença de que podem conter elementos de diferentes tipos e estruturas de dados:\n\nminha_lista &lt;- list(\n  42,\n  \"Olá, mundo!\",\n  c(1, 2, 3, 4, 5),\n  matrix(1:9, nrow = 3),\n  list(a = 10, b = 20)\n)\nminha_lista\n\n[[1]]\n[1] 42\n\n[[2]]\n[1] \"Olá, mundo!\"\n\n[[3]]\n[1] 1 2 3 4 5\n\n[[4]]\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n[[5]]\n[[5]]$a\n[1] 10\n\n[[5]]$b\n[1] 20"
  },
  {
    "objectID": "gabriel_curso_r.html#listas-1",
    "href": "gabriel_curso_r.html#listas-1",
    "title": "Introdução à linguagem de programação R",
    "section": "Listas",
    "text": "Listas\nÉ possível também nomear os elementos de uma lista e acessar seus elementos pelo nome:\n\nminha_lista2 &lt;- list(\n  numero = 42,\n  texto = \"Olá, mundo!\",\n  vetor = c(1, 2, 3, 4, 5),\n  matriz = matrix(1:9, nrow = 3),\n  sublista = list(a = 10, b = 20)\n)\nminha_lista2\n\n$numero\n[1] 42\n\n$texto\n[1] \"Olá, mundo!\"\n\n$vetor\n[1] 1 2 3 4 5\n\n$matriz\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n$sublista\n$sublista$a\n[1] 10\n\n$sublista$b\n[1] 20"
  },
  {
    "objectID": "gabriel_curso_r.html#acessando-elementos-de-uma-lista",
    "href": "gabriel_curso_r.html#acessando-elementos-de-uma-lista",
    "title": "Introdução à linguagem de programação R",
    "section": "Acessando elementos de uma lista",
    "text": "Acessando elementos de uma lista\nPara acessar elementos de uma lista, é semelhante aos vetores atômicos. Caso seja uma lista sem nomes, basta utilizar colchetes duplos e passar a posição. Veja um exemplo acessando o primeiro elementos da lista minha_lista:\n\nminha_lista[[1]]\n\n[1] 42\n\n\n\nminha_lista[1:3]\n\n[[1]]\n[1] 42\n\n[[2]]\n[1] \"Olá, mundo!\"\n\n[[3]]\n[1] 1 2 3 4 5"
  },
  {
    "objectID": "gabriel_curso_r.html#acessando-elementos-de-uma-lista-1",
    "href": "gabriel_curso_r.html#acessando-elementos-de-uma-lista-1",
    "title": "Introdução à linguagem de programação R",
    "section": "Acessando elementos de uma lista",
    "text": "Acessando elementos de uma lista\nAcessando pelo nome na lista minha_lista2:\n\nminha_lista2$vetor\n\n[1] 1 2 3 4 5\n\n\nÉ possível também acessar o elemento com os colchetes duplos:\n\nminha_lista2[[\"vetor\"]]\n\n[1] 1 2 3 4 5"
  },
  {
    "objectID": "gabriel_curso_r.html#data-frames",
    "href": "gabriel_curso_r.html#data-frames",
    "title": "Introdução à linguagem de programação R",
    "section": "Data Frames",
    "text": "Data Frames\nO Data Frame é a estrutura de dados em R que representam os dados como uma tabela. Assim como as listas, eles podem ter elementos de diferentes tipos de dados, mas os elementos de suas colunas devem ser do mesmo tipo."
  },
  {
    "objectID": "gabriel_curso_r.html#como-criar-um-data-frame",
    "href": "gabriel_curso_r.html#como-criar-um-data-frame",
    "title": "Introdução à linguagem de programação R",
    "section": "Como criar um Data Frame",
    "text": "Como criar um Data Frame\nPara a criação de um Data Frame, podemos utilizar a função data.frame. Veja um exemplo:\n\nmeu_dataframe &lt;- data.frame(\n  pessoa = c(\"Bruce\", \"Dr. Manhattan\", \"Simone\"),\n  idade = c(30, 43, 45),\n  Sexo = factor(c(\"M\", \"M\", \"F\"))\n)\nmeu_dataframe\n\n         pessoa idade Sexo\n1         Bruce    30    M\n2 Dr. Manhattan    43    M\n3        Simone    45    F\n\n\nPodemos acessar os elementos da mesma forma que uma matriz:\n\nmeu_dataframe[2, 2]\n\n[1] 43\n\nmeu_dataframe[2:3, 3]\n\n[1] M F\nLevels: F M\n\nmeu_dataframe[, c(3, 1)]\n\n  Sexo        pessoa\n1    M         Bruce\n2    M Dr. Manhattan\n3    F        Simone"
  },
  {
    "objectID": "gabriel_curso_r.html#acessando-elementos-de-um-data-frame",
    "href": "gabriel_curso_r.html#acessando-elementos-de-um-data-frame",
    "title": "Introdução à linguagem de programação R",
    "section": "Acessando elementos de um Data Frame",
    "text": "Acessando elementos de um Data Frame\nVocê também pode acessar os vetores passados para o data frame utilizando seu nome:\n\nmeu_dataframe$pessoa\n\n[1] \"Bruce\"         \"Dr. Manhattan\" \"Simone\"       \n\n\nPara saber a quantidade de dimensões, linhas e colunas um data frame tem, podemos utilizar a função dim, nrow e ncol:\n\ndim(meu_dataframe)\n\n[1] 3 3\n\nnrow(meu_dataframe)\n\n[1] 3\n\nncol(meu_dataframe)\n\n[1] 3"
  },
  {
    "objectID": "gabriel_curso_r.html#combinando-data-frames",
    "href": "gabriel_curso_r.html#combinando-data-frames",
    "title": "Introdução à linguagem de programação R",
    "section": "Combinando Data Frames",
    "text": "Combinando Data Frames\nA função rbind serve para unir dois data frames (ou matrizes) por linha, ou por coluna com a função cbind:\n\nmeu_dataframe2 &lt;- data.frame(\n  pessoa=\"Brian\",\n  idade=7,\n  Sexo=factor(\"M\",levels=levels(meu_dataframe$Sexo))\n  )\n\n# Juntando por linha\n\nrbind(meu_dataframe, meu_dataframe2)\n\n         pessoa idade Sexo\n1         Bruce    30    M\n2 Dr. Manhattan    43    M\n3        Simone    45    F\n4         Brian     7    M"
  },
  {
    "objectID": "gabriel_curso_r.html#combinando-data-frames-1",
    "href": "gabriel_curso_r.html#combinando-data-frames-1",
    "title": "Introdução à linguagem de programação R",
    "section": "Combinando Data Frames",
    "text": "Combinando Data Frames\nAgora, utilizando a função rbind, podemos combinar dois data frames como se estivessemos adicionando novas variáveis ao banco de dados:\n\nmeu_dataframe3 &lt;- data.frame(\n  sobrenome = c(\"Wayne\", \"Osterman\", \"Pereira\"),\n  filme = c(\"Batman\", \"Watchman\", NA)\n)\n\ncbind(meu_dataframe, meu_dataframe3)\n\n         pessoa idade Sexo sobrenome    filme\n1         Bruce    30    M     Wayne   Batman\n2 Dr. Manhattan    43    M  Osterman Watchman\n3        Simone    45    F   Pereira     &lt;NA&gt;\n\n\nPodemos adicionar variáveis utilizando o cifrão:\n\nmeu_dataframe3$quadrinhos &lt;- c(\"Sim\", \"Sim\", \"Não\")\nmeu_dataframe3\n\n  sobrenome    filme quadrinhos\n1     Wayne   Batman        Sim\n2  Osterman Watchman        Sim\n3   Pereira     &lt;NA&gt;        Não"
  },
  {
    "objectID": "gabriel_curso_r.html#funções-especiais",
    "href": "gabriel_curso_r.html#funções-especiais",
    "title": "Introdução à linguagem de programação R",
    "section": "Funções especiais",
    "text": "Funções especiais"
  },
  {
    "objectID": "gabriel_curso_r.html#o-que-é-o-tidyverse",
    "href": "gabriel_curso_r.html#o-que-é-o-tidyverse",
    "title": "Introdução à linguagem de programação R",
    "section": "O que é o Tidyverse",
    "text": "O que é o Tidyverse\nO tidyverse é uma coleção de pacotes que facilita os processos básicos de um projeto ou análise de ciência de dados. Além disso, os pacotes que o compõe possuem uma sintaxe comum, o que torna a aplicação de métodos de análise de dados mais consistente e intuitiva. O tidyverse inclui pacotes para visualização, limpeza de dados, manipulação de datas, importação de dados e manipulação de strings."
  },
  {
    "objectID": "gabriel_curso_r.html#como-importar-um-banco-de-dados",
    "href": "gabriel_curso_r.html#como-importar-um-banco-de-dados",
    "title": "Introdução à linguagem de programação R",
    "section": "Como importar um banco de dados",
    "text": "Como importar um banco de dados\nO pacote do tidyverse que serve para importação de banco de dados, é o readr. Por exemplo, podemos utilizar a função read_csv para ler um arquivo .csv. Veja um exemplo com dados de Chuva:\n\nlibrary(tidyverse)\n\n\ndf &lt;- read_csv(\"chuva.csv\")\nhead(df)\n\n# A tibble: 6 × 38\n  EstacaoCodigo Data    Maxima Total DiaMaxima NumDiasDeChuva TotalAnual Chuva01\n          &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;          &lt;dbl&gt;      &lt;dbl&gt;   &lt;dbl&gt;\n1        734006 01/06/…  182.  672.         14             24         NA    11.8\n2        734006 01/05/…   45   204.         21             21         NA     0.2\n3        734006 01/04/…   53   183.          1             24         NA    53  \n4        734006 01/03/…   55.4 240.         27             20         NA     0  \n5        734006 01/02/…   71   201.         13             NA         NA     0.4\n6        734006 01/01/…   28.4  72.6        27              8         NA     0  \n# ℹ 30 more variables: Chuva02 &lt;dbl&gt;, Chuva03 &lt;dbl&gt;, Chuva04 &lt;dbl&gt;,\n#   Chuva05 &lt;dbl&gt;, Chuva06 &lt;dbl&gt;, Chuva07 &lt;dbl&gt;, Chuva08 &lt;dbl&gt;, Chuva09 &lt;dbl&gt;,\n#   Chuva10 &lt;dbl&gt;, Chuva11 &lt;dbl&gt;, Chuva12 &lt;dbl&gt;, Chuva13 &lt;dbl&gt;, Chuva14 &lt;dbl&gt;,\n#   Chuva15 &lt;dbl&gt;, Chuva16 &lt;dbl&gt;, Chuva17 &lt;dbl&gt;, Chuva18 &lt;dbl&gt;, Chuva19 &lt;dbl&gt;,\n#   Chuva20 &lt;dbl&gt;, Chuva21 &lt;dbl&gt;, Chuva22 &lt;dbl&gt;, Chuva23 &lt;dbl&gt;, Chuva24 &lt;dbl&gt;,\n#   Chuva25 &lt;dbl&gt;, Chuva26 &lt;dbl&gt;, Chuva27 &lt;dbl&gt;, Chuva28 &lt;dbl&gt;, Chuva29 &lt;dbl&gt;,\n#   Chuva30 &lt;dbl&gt;, Chuva31 &lt;dbl&gt;"
  },
  {
    "objectID": "gabriel_curso_r.html#lidando-com-datas",
    "href": "gabriel_curso_r.html#lidando-com-datas",
    "title": "Introdução à linguagem de programação R",
    "section": "Lidando com datas",
    "text": "Lidando com datas\n\ndf &lt;- df |&gt;\n  mutate(\n    Data = as.Date(Data, format = \"%d/%m/%Y\"),\n    Ano = year(Data),\n    Mês = month(Data),\n    Dia = day(Data)\n    ) |&gt;\n    drop_na(Data)\nhead(df)\n\n# A tibble: 6 × 41\n  EstacaoCodigo Data       Maxima Total DiaMaxima NumDiasDeChuva TotalAnual\n          &lt;dbl&gt; &lt;date&gt;      &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;          &lt;dbl&gt;      &lt;dbl&gt;\n1        734006 2019-06-01  182.  672.         14             24         NA\n2        734006 2019-05-01   45   204.         21             21         NA\n3        734006 2019-04-01   53   183.          1             24         NA\n4        734006 2019-03-01   55.4 240.         27             20         NA\n5        734006 2019-02-01   71   201.         13             NA         NA\n6        734006 2019-01-01   28.4  72.6        27              8         NA\n# ℹ 34 more variables: Chuva01 &lt;dbl&gt;, Chuva02 &lt;dbl&gt;, Chuva03 &lt;dbl&gt;,\n#   Chuva04 &lt;dbl&gt;, Chuva05 &lt;dbl&gt;, Chuva06 &lt;dbl&gt;, Chuva07 &lt;dbl&gt;, Chuva08 &lt;dbl&gt;,\n#   Chuva09 &lt;dbl&gt;, Chuva10 &lt;dbl&gt;, Chuva11 &lt;dbl&gt;, Chuva12 &lt;dbl&gt;, Chuva13 &lt;dbl&gt;,\n#   Chuva14 &lt;dbl&gt;, Chuva15 &lt;dbl&gt;, Chuva16 &lt;dbl&gt;, Chuva17 &lt;dbl&gt;, Chuva18 &lt;dbl&gt;,\n#   Chuva19 &lt;dbl&gt;, Chuva20 &lt;dbl&gt;, Chuva21 &lt;dbl&gt;, Chuva22 &lt;dbl&gt;, Chuva23 &lt;dbl&gt;,\n#   Chuva24 &lt;dbl&gt;, Chuva25 &lt;dbl&gt;, Chuva26 &lt;dbl&gt;, Chuva27 &lt;dbl&gt;, Chuva28 &lt;dbl&gt;,\n#   Chuva29 &lt;dbl&gt;, Chuva30 &lt;dbl&gt;, Chuva31 &lt;dbl&gt;, Ano &lt;dbl&gt;, Mês &lt;dbl&gt;, …"
  },
  {
    "objectID": "gabriel_curso_r.html#calculando-os-acumulados",
    "href": "gabriel_curso_r.html#calculando-os-acumulados",
    "title": "Introdução à linguagem de programação R",
    "section": "Calculando os acumulados",
    "text": "Calculando os acumulados\n\ndf  &lt;- df |&gt;\n  select(- Dia)\n\ndf &lt;- df |&gt;\n  pivot_longer(\n    cols = starts_with(\"Chuva\"),\n    names_to = \"Dia\",\n    values_to = \"Chuva\"\n  ) |&gt;\n  mutate(Dia = as.double(str_replace(Dia, \"Chuva\", \"\"))) |&gt;\n  arrange(Data, Dia)\n\nhead(df)\n\n# A tibble: 6 × 11\n  EstacaoCodigo Data       Maxima Total DiaMaxima NumDiasDeChuva TotalAnual\n          &lt;dbl&gt; &lt;date&gt;      &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;          &lt;dbl&gt;      &lt;dbl&gt;\n1        734006 1901-01-01     26  27.4        31              2       735.\n2        734006 1901-01-01     26  27.4        31              2       735.\n3        734006 1901-01-01     26  27.4        31              2       735.\n4        734006 1901-01-01     26  27.4        31              2       735.\n5        734006 1901-01-01     26  27.4        31              2       735.\n6        734006 1901-01-01     26  27.4        31              2       735.\n# ℹ 4 more variables: Ano &lt;dbl&gt;, Mês &lt;dbl&gt;, Dia &lt;dbl&gt;, Chuva &lt;dbl&gt;\n\n\n\nfinal  &lt;- as.Date(\"2019-01-01\")\n\n# df &lt;- df |&gt;\n#   filter(between(Data, final - days(360), final)) |&gt;\n#   mutate(Acumulado = cumsum(Chuva))\n\n\nteste &lt;- df |&gt;\n  mutate(Período = between(Data, final - days(360), final))\n\nacumulados &lt;- function() {\n  n &lt;- nrow(teste)\n  acumulado &lt;- rep(NA, times = n)\n  acumulado[which(teste$Período)] &lt;- cumsum(teste$Chuva[teste$Período])\n  acumulado\n}\n\nleap_year(1200)"
  }
]