[
  {
    "objectID": "gabriel_curso_r.html#o-que-são-pacotes-1",
    "href": "gabriel_curso_r.html#o-que-são-pacotes-1",
    "title": "Introdução à linguagem de programação R",
    "section": "O que são pacotes",
    "text": "O que são pacotes\nA linguagem base do R vem com inúmeras funções implementadas para operações numéricas, análise estatística, gráficos para visualização e muitos outros. Essas funções da própria linguagem são conhecidas como built-in. No entanto, é possível utilizar funcionalidades implementadas por outros usuários da linguagem. Para isso, podemos instalar pacotes.\nOs pacotes em R e muitas outras linguagens são um conjunto de funcionalidades implementadas por usuários da própria linguagem. Por exemplo, um dos pacotes mais conhecidos para visualização de gráficos é o ggplot2, que foi implementada por Hadley Wickham. Este pacote implementa uma série de funções para visualização estatística, permitindo criar Box-plots, gráficos de dispersão, gráficos de linhas e uma miríade de outros gráficos."
  },
  {
    "objectID": "gabriel_curso_r.html#como-instalar-pacotes-1",
    "href": "gabriel_curso_r.html#como-instalar-pacotes-1",
    "title": "Introdução à linguagem de programação R",
    "section": "Como instalar pacotes",
    "text": "Como instalar pacotes\nExiste uma função principal para instalação de pacotes: install.packages. Você pode verificar sua documentação digitando ?install.packages1 no seu console do R. Dessa forma, podemos instalar o pacote ggplot2 da seguinte forma:\n\ninstall.packages(\"ggplot2\")\n\nAgora que o pacote foi instalado, você pode utilizar suas funções chamando ele com a função library. A função library carrega todos as funções implementadas num pacote. Assim, temos:\n\nlibrary(ggplot2)\n\nObs: Utilizar ? antes do nome de uma função no R é uma forma de olhar a documentação de uma função e obter informações sobre sua funcionalidade. Caso você queira pesquisar afundo no sistema de ajuda do R, você pode utilizar ?? antes do nome de uma função e irá procurar em diferentes pacotes funções com aquele mesmo nome. A função help é o mesmo que utilizar ?."
  },
  {
    "objectID": "gabriel_curso_r.html#operações-matemáticas-básicas-1",
    "href": "gabriel_curso_r.html#operações-matemáticas-básicas-1",
    "title": "Introdução à linguagem de programação R",
    "section": "Operações matemáticas básicas",
    "text": "Operações matemáticas básicas\nA linguagem de programação R tem implementado 7 operações matemáticas básicas implementadas na linguagem, além de suportar uma grande quantidade de funções matemáticas que permitem realizar operações mais complexas. Por exemplo, caso queira calcular o \\(\\ln\\left(10\\right)\\), podemos utilizar a função \\(\\log\\left(\\right)\\). Veja um exemplo:\n\nlog(10)\n\n[1] 2.302585\n\n\nCom a função \\(\\exp\\left(\\right)\\) é possível calcular a função exponencial \\(\\left(e^x\\right)\\). Assim, calculando \\(e^2\\):\n\nexp(2)\n\n[1] 7.389056"
  },
  {
    "objectID": "gabriel_curso_r.html#operações-matemáticas-básicas-2",
    "href": "gabriel_curso_r.html#operações-matemáticas-básicas-2",
    "title": "Introdução à linguagem de programação R",
    "section": "Operações matemáticas básicas",
    "text": "Operações matemáticas básicas\n\nResumo das operações matemáticas\n\n\nOperação\nNome\nExemplo\n\n\n\n\n+\nAdição\nx + y\n\n\n-\nSubtração\nx - y\n\n\n*\nMultiplicação\nx * y\n\n\n/\nDivisão\nx / y\n\n\n^\nExpoente\nx ^ y\n\n\n%%\nResto da divisão (Módulo)\nx %% y\n\n\n%/%\nDivisão inteira\nx %/% y"
  },
  {
    "objectID": "gabriel_curso_r.html#operações-de-comparação",
    "href": "gabriel_curso_r.html#operações-de-comparação",
    "title": "Introdução à linguagem de programação R",
    "section": "Operações de comparação",
    "text": "Operações de comparação\nOs operadores de comparação são utilizados para comparar dois valores\n\n\n\nOperadores\nNome\nExemplo\n\n\n\n\n==\nIgual\nx == y\n\n\n!=\nNão é igual\nx != y\n\n\n&gt;\nMaior que\nx &gt; y\n\n\n&lt;\nMenor que\nx &lt; y\n\n\n&gt;=\nMaior ou igual que\nx &gt;= y\n\n\n&lt;=\nMenor ou igual que\nx &lt;= y"
  },
  {
    "objectID": "gabriel_curso_r.html#operações-lógicas",
    "href": "gabriel_curso_r.html#operações-lógicas",
    "title": "Introdução à linguagem de programação R",
    "section": "Operações lógicas",
    "text": "Operações lógicas\nOperadores lógicos são usados para combinar declarações condicionais:\n\n\n\nOperadores\nNome\n\n\n\n\n&\nRetorna TRUE se os dois elementos sao verdadeiros\n\n\n&&\nRetorna TRUE se ambas as afirmações forem verdadeiras.\n\n\n|\nEle retorna TRUE se uma das afirmações for verdadeira.\n\n\n||\nEle retorna TRUE se uma das afirmações for verdadeira.\n\n\n!\nRetorna FALSE se a afirmaçao for verdadeira"
  },
  {
    "objectID": "gabriel_curso_r.html#assinando-objetos",
    "href": "gabriel_curso_r.html#assinando-objetos",
    "title": "Introdução à linguagem de programação R",
    "section": "Assinando objetos",
    "text": "Assinando objetos\nCaso você queira guardar valores ou diferentes itens na linguagem R, você pode utilizar o sinal de = ou &lt;-. Assim, essa é podemos atribuir valores para dois objetos, y e x:\n\nx &lt;- 3\ny &lt;- 5\n\nAssim, o objeto \\(x\\) e \\(y\\) tem os valores 3 e 5 atribuído a eles, respectivamente. Agora é possível fazer cálculos matemáticos:\n\nx + y\n\n[1] 8\n\n\nÉ possível utilizar os outros dois objetos para criar outro a partir deles:\n\nz &lt;- x / y\nz\n\n[1] 0.6"
  },
  {
    "objectID": "gabriel_curso_r.html#vetores-atômicos",
    "href": "gabriel_curso_r.html#vetores-atômicos",
    "title": "Introdução à linguagem de programação R",
    "section": "Vetores Atômicos",
    "text": "Vetores Atômicos\nVetores atômicos é uma das estruturas mais amplamente utilizadas no R. Vetor atômico é uma sequência de elementos do mesmo tipo (homogêneo), como números, caracteres, valores lógicos ou outro tipo de elemento. Além disso, os vetores atômicos permitem operações elemento a elemento, o que torna o código mais conciso e mais fácil de ler."
  },
  {
    "objectID": "gabriel_curso_r.html#como-criar-um-vetor-atômico",
    "href": "gabriel_curso_r.html#como-criar-um-vetor-atômico",
    "title": "Introdução à linguagem de programação R",
    "section": "Como criar um vetor atômico",
    "text": "Como criar um vetor atômico\nOs vetores atômicos podem ser criados utilizando a função c(). Por exemplo, você pode criar um objeto chamado meu vetor que tem como atributo um vetor atômico:\n\nmeu_vetor &lt;- c(1, 3, 1, 42)\nmeu_vetor\n\n[1]  1  3  1 42\n\n\nVetores atômico podem ser cálculos ou diferentes valores atribuídos a objetos, incluindo vetores atômicos:\n\nvalorqualquer &lt;- 5\nmeu_vetor2 &lt;- c(3, -3, 2, 3.45, 1e+03, 64^0.5, 2+(3-1.1)/9.44, valorqualquer)\nmeu_vetor2\n\n[1]    3.000000   -3.000000    2.000000    3.450000 1000.000000    8.000000\n[7]    2.201271    5.000000\n\n\nPara criar um vetor atômico de inteiros, basta utilizar o sufixo L. Além disso, podemos criar também um vetor lógico ou de sequência de caracteres:\n\nmeu_vetor_inteiro &lt;- c(1L, 6L, 10L)\nmeu_vetor_de_caracter &lt;- c(\"string\", \"outra_string2\")\nmeu_vetor_logico &lt;- c(TRUE, FALSE, T, F)\n\nVocê pode também juntar vetores:\n\nvetores_juntos &lt;- c(meu_vetor, meu_vetor2)"
  },
  {
    "objectID": "gabriel_curso_r.html#como-criar-um-vetor-atômico-1",
    "href": "gabriel_curso_r.html#como-criar-um-vetor-atômico-1",
    "title": "Introdução à linguagem de programação R",
    "section": "Como criar um vetor atômico",
    "text": "Como criar um vetor atômico\nImportante: Note que atribuições da forma objeto &lt;- valor faz com que objeto seja um vetor de uma única posição.\n\na &lt;- 7L\na[1]\n\n[1] 7"
  },
  {
    "objectID": "gabriel_curso_r.html#extraindo-valores-de-um-vetor-atômico",
    "href": "gabriel_curso_r.html#extraindo-valores-de-um-vetor-atômico",
    "title": "Introdução à linguagem de programação R",
    "section": "Extraindo valores de um vetor atômico",
    "text": "Extraindo valores de um vetor atômico\nVocê pode ter notado valores entre colchetes na saída do código que aparecem dessa forma [i], em que i é um número inteiro. Essa notação indica a posição dos elementos de um vetor atômico. Assim, considerando o vetor meu_vetor2, podemos selecionar o segundo elemento da seguinte forma:\n\nmeu_vetor2[2]\n\n[1] -3\n\n\nCaso não saibamos a quantidade de elementos num vetor e queira obter a quantidade total de elementos num vetor atômico, podemos utilizar a função length():\n\nlength(meu_vetor2)\n\n[1] 8"
  },
  {
    "objectID": "gabriel_curso_r.html#extraindo-valores-de-um-vetor-atômico-1",
    "href": "gabriel_curso_r.html#extraindo-valores-de-um-vetor-atômico-1",
    "title": "Introdução à linguagem de programação R",
    "section": "Extraindo valores de um vetor atômico",
    "text": "Extraindo valores de um vetor atômico\nDessa forma, podemos selecionar o último elemento do vetor meu_vetor2 utilizando a função length:\n\nmeu_vetor2[length(meu_vetor2)]\n\n[1] 5\n\n\nÉ possível também selecionar todos os elementos de um vetor atômico, exceto um. Veja um exemplo selecionando todos os valores do vetor meu_vetor2, exceto o último:\n\nmeu_vetor2[-length(meu_vetor2)]\n\n[1]    3.000000   -3.000000    2.000000    3.450000 1000.000000    8.000000\n[7]    2.201271"
  },
  {
    "objectID": "gabriel_curso_r.html#extraindo-valores-de-um-vetor-atômico-2",
    "href": "gabriel_curso_r.html#extraindo-valores-de-um-vetor-atômico-2",
    "title": "Introdução à linguagem de programação R",
    "section": "Extraindo valores de um vetor atômico",
    "text": "Extraindo valores de um vetor atômico\nÉ possível também selecionar mais de um elemento utilizando sequências que pode ser criado com :. Podemos criar uma sequência de 2 a 5:\n\n2:5\n\n[1] 2 3 4 5\n\n\nAssim selecionando os valores de 2 a 5 do vetor meu_vetor2:\n\nmeu_vetor2[2:5]\n\n[1]   -3.00    2.00    3.45 1000.00\n\n\nOs vetores atômicos também podem ser utilizados para selecionar elementos. Selecionando o quarto e sexto elemento:\n\nmeu_vetor2[c(4, 6)]\n\n[1] 3.45 8.00\n\n\nRemovendo o quarto e sexto elemento:\n\nmeu_vetor2[-c(4, 6)]\n\n[1]    3.000000   -3.000000    2.000000 1000.000000    2.201271    5.000000"
  },
  {
    "objectID": "gabriel_curso_r.html#substituindo-elementos-de-vetores-atômicos",
    "href": "gabriel_curso_r.html#substituindo-elementos-de-vetores-atômicos",
    "title": "Introdução à linguagem de programação R",
    "section": "Substituindo elementos de vetores atômicos",
    "text": "Substituindo elementos de vetores atômicos\nÉ possível também substituir os elementos de um vetor atômico utilizando a sua posição. Veja um exemplo:\n\n# reescrevendo o segundo elemento de `meu_vetor2` por um caracter\n\nmeu_vetor2[2]  &lt;- \"Gabriel\"\nmeu_vetor2\n\n[1] \"3\"                \"Gabriel\"          \"2\"                \"3.45\"            \n[5] \"1000\"             \"8\"                \"2.20127118644068\" \"5\"               \n\n\nPerceba que agora que todos os elementos do vetor convergem para caracter. É possível perceber isso pelas \".\nSubstituindo do segundo ao quarto valor:\n\nmeu_vetor2[2:4] &lt;- c(\"Paulo\", \"Ataline\", \"Gabriel\")\nmeu_vetor2\n\n[1] \"3\"                \"Paulo\"            \"Ataline\"          \"Gabriel\"         \n[5] \"1000\"             \"8\"                \"2.20127118644068\" \"5\""
  },
  {
    "objectID": "gabriel_curso_r.html#funções-importantes-para-vetores",
    "href": "gabriel_curso_r.html#funções-importantes-para-vetores",
    "title": "Introdução à linguagem de programação R",
    "section": "Funções importantes para vetores",
    "text": "Funções importantes para vetores\nAs funções a seguir servem para checar o tipo de dados de um vetor e retorna TRUE se for verdade ou FALSE, caso contrário. A única função que não testa o tipo de dados mas sim a estrutura de dados é a função is.atomic(), que serve para testar se é um vetor atômico.\nEx: is.character(). Checa se é um vetor de caracteres;\nEx: is.double(). Checa se é um vetor de números reais;\nEx: is.integer(). Checa se é um vetor de inteiros;\nEx: is.logical(). Checa se é um vetor de valores lógicos;\nEx: is.atomic(). Checa se é um vetor atômico"
  },
  {
    "objectID": "gabriel_curso_r.html#funções-para-conversão-de-tipo-de-vetores",
    "href": "gabriel_curso_r.html#funções-para-conversão-de-tipo-de-vetores",
    "title": "Introdução à linguagem de programação R",
    "section": "Funções para conversão de tipo de vetores",
    "text": "Funções para conversão de tipo de vetores\nExistem funções para mudar o tipo de dados dos vetores. Por exemplo, se tivermos um vetor y do tipo double, podemos converter ele para o tipo caracter com a função as.character():\n\ny &lt;- c(1.2, 1.4, 1.5)\nas.character(y)\n\n[1] \"1.2\" \"1.4\" \"1.5\"\n\n\nDe forma similar, podemos converter o para double, lógico ou inteiro da seguinte forma:\n\nas.integer(y)\n\n[1] 1 1 1\n\nas.logical(y)\n\n[1] TRUE TRUE TRUE\n\nas.double(y)\n\n[1] 1.2 1.4 1.5"
  },
  {
    "objectID": "gabriel_curso_r.html#funções-matemáticas-e-estatísticas-para-vetores",
    "href": "gabriel_curso_r.html#funções-matemáticas-e-estatísticas-para-vetores",
    "title": "Introdução à linguagem de programação R",
    "section": "Funções matemáticas e estatísticas para vetores",
    "text": "Funções matemáticas e estatísticas para vetores\n\n\n\n\n\n\n\nFunção em R\nFinalidade\n\n\n\n\nsum(x)\nRetorna a soma do vetor x\n\n\nmean(x)\nRetorna a média do vetor x\n\n\nmedian(x)\nRetorna a mediana do vetor x\n\n\nabs(x)\nRetorna o vetor com os valores absolutos\n\n\nsqrt(x)\nRetorna o vetor com as raizes quadradas\n\n\nsort(x)\nRetorna o vetor x ordenado de forma crescente\n\n\nsort(x, decreasing = TRUE)\nRetorna o vetor x ordenado de forma decrescente\n\n\nexp(x)\nRetorna o vetor exponencial\n\n\nlog(x)\nRetorna o vetor logaritmo natural\n\n\nlog(x, base = 10)\nRetorna o vetor com o logaritmo na base 10\n\n\nsin(x), cos(x), tan(x)\nRetorna o vator com resultados trigonométricos\n\n\nlength(x)\nCardinalidade do vetor x\n\n\nfactorial(x)\nFatorial dos elementos de x\n\n\nchoose(3, 2)\nCombinacao tres, dois a dois\n\n\nsummary(x)\nMedidas descritivas do vetor x"
  },
  {
    "objectID": "gabriel_curso_r.html#listas",
    "href": "gabriel_curso_r.html#listas",
    "title": "Introdução à linguagem de programação R",
    "section": "Listas",
    "text": "Listas\nAs listas são semelhantes aos vetores atômicos, com a diferença de que podem conter elementos de diferentes tipos e estruturas de dados:\n\nminha_lista &lt;- list(\n  42,\n  \"Olá, mundo!\",\n  c(1, 2, 3, 4, 5),\n  matrix(1:9, nrow = 3),\n  list(a = 10, b = 20)\n)\nminha_lista\n\n[[1]]\n[1] 42\n\n[[2]]\n[1] \"Olá, mundo!\"\n\n[[3]]\n[1] 1 2 3 4 5\n\n[[4]]\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n[[5]]\n[[5]]$a\n[1] 10\n\n[[5]]$b\n[1] 20"
  },
  {
    "objectID": "gabriel_curso_r.html#listas-1",
    "href": "gabriel_curso_r.html#listas-1",
    "title": "Introdução à linguagem de programação R",
    "section": "Listas",
    "text": "Listas\nÉ possível também nomear os elementos de uma lista e acessar seus elementos pelo nome:\n\nminha_lista2 &lt;- list(\n  numero = 42,\n  texto = \"Olá, mundo!\",\n  vetor = c(1, 2, 3, 4, 5),\n  matriz = matrix(1:9, nrow = 3),\n  sublista = list(a = 10, b = 20)\n)\nminha_lista2\n\n$numero\n[1] 42\n\n$texto\n[1] \"Olá, mundo!\"\n\n$vetor\n[1] 1 2 3 4 5\n\n$matriz\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n$sublista\n$sublista$a\n[1] 10\n\n$sublista$b\n[1] 20"
  },
  {
    "objectID": "gabriel_curso_r.html#acessando-e-modificando-nomes-de-uma-lista",
    "href": "gabriel_curso_r.html#acessando-e-modificando-nomes-de-uma-lista",
    "title": "Introdução à linguagem de programação R",
    "section": "Acessando e modificando nomes de uma lista",
    "text": "Acessando e modificando nomes de uma lista\nOs nomes de uma lista com elementos nomeados podem ser acessados utilizando a função names() e para modificar os nomes, basta passar um vetor atômico com os nomes modificados:\n\nminha_lista3 &lt;- minha_lista2\n\n# Nomes originais\n\nnames(minha_lista3)\n\n[1] \"numero\"   \"texto\"    \"vetor\"    \"matriz\"   \"sublista\"\n\nnames(minha_lista3) &lt;- c(\n  \"nome_modificado1\", \"nome_modificado2\",\n  \"nome_modificado3\", \"nome_modificado4\",\n  \"nome_modificado5\")\n\n# Nomes modificados\n\nnames(minha_lista3)\n\n[1] \"nome_modificado1\" \"nome_modificado2\" \"nome_modificado3\" \"nome_modificado4\"\n[5] \"nome_modificado5\"\n\n\nO mesmo vale para vetores atômicos nomeados. Para criar um vetor atômico nomeado basta nomear os elementos como em uma lista:\n\natomico_nomeado &lt;- c(b = \"sim\", c = \"valor2\", d = \"valor3\")\natomico_nomeado\n\n       b        c        d \n   \"sim\" \"valor2\" \"valor3\" \n\nnames(atomico_nomeado)\n\n[1] \"b\" \"c\" \"d\""
  },
  {
    "objectID": "gabriel_curso_r.html#acessando-elementos-de-uma-lista",
    "href": "gabriel_curso_r.html#acessando-elementos-de-uma-lista",
    "title": "Introdução à linguagem de programação R",
    "section": "Acessando elementos de uma lista",
    "text": "Acessando elementos de uma lista\nPara acessar elementos de uma lista, é semelhante aos vetores atômicos. Caso seja uma lista sem nomes, basta utilizar colchetes duplos e passar a posição. Veja um exemplo acessando o primeiro elementos da lista minha_lista:\n\nminha_lista[[1]]\n\n[1] 42\n\n\n\nminha_lista[1:3]\n\n[[1]]\n[1] 42\n\n[[2]]\n[1] \"Olá, mundo!\"\n\n[[3]]\n[1] 1 2 3 4 5"
  },
  {
    "objectID": "gabriel_curso_r.html#acessando-elementos-de-uma-lista-1",
    "href": "gabriel_curso_r.html#acessando-elementos-de-uma-lista-1",
    "title": "Introdução à linguagem de programação R",
    "section": "Acessando elementos de uma lista",
    "text": "Acessando elementos de uma lista\nAcessando pelo nome na lista minha_lista2:\n\nminha_lista2$vetor\n\n[1] 1 2 3 4 5\n\n\nÉ possível também acessar o elemento com os colchetes duplos:\n\nminha_lista2[[\"vetor\"]]\n\n[1] 1 2 3 4 5\n\n\nAs operações lógicas para acessar elementos de um vetor atômico continua valendo para um vetor do tipo lista:\n\nminha_lista2[minha_lista2 == \"Olá, mundo!\"]\n\n$texto\n[1] \"Olá, mundo!\""
  },
  {
    "objectID": "gabriel_curso_r.html#mais-funções-importantes-para-vetores",
    "href": "gabriel_curso_r.html#mais-funções-importantes-para-vetores",
    "title": "Introdução à linguagem de programação R",
    "section": "Mais funções importantes para vetores",
    "text": "Mais funções importantes para vetores\nExistem três funções importantes para vetores, a função str que permite checar a estrutura de um tipo de dado. Por exemplo, se utilizarmos numa lista, ela mostrara o tipo de dados da lista:\n\n# O primeiro valor é numérico, o segundo é caracter, o terceiro é um vetor atômico e o último é uma lista nomeada de 2 elementos\n\nstr(minha_lista2)\n\nList of 5\n $ numero  : num 42\n $ texto   : chr \"Olá, mundo!\"\n $ vetor   : num [1:5] 1 2 3 4 5\n $ matriz  : int [1:3, 1:3] 1 2 3 4 5 6 7 8 9\n $ sublista:List of 2\n  ..$ a: num 10\n  ..$ b: num 20\n\n\nOutra função importante é a is.list que serve para checar se um objeto é uma lista e retorna o valor lógico TRUE, se for verdade, e FALSE caso contrário.\n\nis.list(minha_lista2)\n\n[1] TRUE\n\n\nPor último, para transformar uma lista em um vetor atômico, podemos utilizar a função unlist():\n\nunlist(minha_lista2)"
  },
  {
    "objectID": "gabriel_curso_r.html#exercícios-de-vetores",
    "href": "gabriel_curso_r.html#exercícios-de-vetores",
    "title": "Introdução à linguagem de programação R",
    "section": "Exercícios de vetores",
    "text": "Exercícios de vetores\nExercício: Construa um vetor de números pares de 2 a 100 e um outro vetor de números ímpares de números de 1 a 99. Dica: um número par é divisível por 2, ou seja, o resto da divisão seria zero. Caso contrário, o número é ímpar."
  },
  {
    "objectID": "gabriel_curso_r.html#exercícios-de-vetores-1",
    "href": "gabriel_curso_r.html#exercícios-de-vetores-1",
    "title": "Introdução à linguagem de programação R",
    "section": "Exercícios de vetores",
    "text": "Exercícios de vetores\nExercício: Construa uma sequência de números no intervalo fechado [1, 100] por intervalos de comprimento 0.1. Construa uma outra sequência no intervalo fechado [1, 100] com 37 elementos. Dica: utilize a função seq(). Consulte a sua documentação com ?seq"
  },
  {
    "objectID": "gabriel_curso_r.html#exercícios-de-vetores-2",
    "href": "gabriel_curso_r.html#exercícios-de-vetores-2",
    "title": "Introdução à linguagem de programação R",
    "section": "Exercícios de vetores",
    "text": "Exercícios de vetores\nExercício: Corra o código abaixo e entenda assimile as saídas.\n\nl &lt;- c(list(c(3,2),\"a\"),c(1,2))\nstr(l)\n\nList of 4\n $ : num [1:2] 3 2\n $ : chr \"a\"\n $ : num 1\n $ : num 2\n\nm &lt;- list(list(c(3,2),\"a\"),c(1,2))\nstr(m)\n\nList of 2\n $ :List of 2\n  ..$ : num [1:2] 3 2\n  ..$ : chr \"a\"\n $ : num [1:2] 1 2"
  },
  {
    "objectID": "gabriel_curso_r.html#data-frames",
    "href": "gabriel_curso_r.html#data-frames",
    "title": "Introdução à linguagem de programação R",
    "section": "Data Frames",
    "text": "Data Frames\nO Data Frame é a estrutura de dados em R que representam os dados como uma tabela. Assim como as listas, eles podem ter elementos de diferentes tipos de dados, mas os elementos de suas colunas devem ser do mesmo tipo."
  },
  {
    "objectID": "gabriel_curso_r.html#como-criar-um-data-frame",
    "href": "gabriel_curso_r.html#como-criar-um-data-frame",
    "title": "Introdução à linguagem de programação R",
    "section": "Como criar um Data Frame",
    "text": "Como criar um Data Frame\nPara a criação de um Data Frame, podemos utilizar a função data.frame. Veja um exemplo:\n\nmeu_dataframe &lt;- data.frame(\n  pessoa = c(\"Bruce\", \"Dr. Manhattan\", \"Simone\"),\n  idade = c(30, 43, 45),\n  Sexo = factor(c(\"M\", \"M\", \"F\"))\n)\nmeu_dataframe\n\n         pessoa idade Sexo\n1         Bruce    30    M\n2 Dr. Manhattan    43    M\n3        Simone    45    F\n\n\nPodemos acessar os elementos de um dataframe abrindo colchetes e passando a posição da linha pra a primeira posição e da coluna para a segunda posição [linha, coluna]:\n\n# acessa a segunda linha e segunda coluna\n\nmeu_dataframe[2, 2]\n\n[1] 43\n\n# acessa da segunda a terceira linha da terceira coluna\n\nmeu_dataframe[2:3, 3]\n\n[1] M F\nLevels: F M\n\n# acessa todas as linhas, mas apenas a coluna 3 e 1\n\nmeu_dataframe[, c(3, 1)]\n\n  Sexo        pessoa\n1    M         Bruce\n2    M Dr. Manhattan\n3    F        Simone\n\n# acessa todas as linhas, mas remove a terceira e primeira coluna e mantém todas as outras\n\nmeu_dataframe[, -c(3, 1)]\n\n[1] 30 43 45\n\n# Acessando pelo nome\n\nmeu_dataframe[, c(\"pessoa\", \"idade\")]\n\n         pessoa idade\n1         Bruce    30\n2 Dr. Manhattan    43\n3        Simone    45\n\n# Acessando elementos de uma linha com operações lógicas\n\nmeu_dataframe[meu_dataframe$idade &lt; 45,]\n\n         pessoa idade Sexo\n1         Bruce    30    M\n2 Dr. Manhattan    43    M"
  },
  {
    "objectID": "gabriel_curso_r.html#acessando-elementos-de-um-data-frame",
    "href": "gabriel_curso_r.html#acessando-elementos-de-um-data-frame",
    "title": "Introdução à linguagem de programação R",
    "section": "Acessando elementos de um Data Frame",
    "text": "Acessando elementos de um Data Frame\nVocê também pode acessar os vetores passados para o data frame utilizando o nome da coluna:\n\nmeu_dataframe$pessoa\n\n[1] \"Bruce\"         \"Dr. Manhattan\" \"Simone\"       \n\n\nPara saber a quantidade de dimensões, linhas e colunas um data frame tem, podemos utilizar a função dim, nrow e ncol:\n\ndim(meu_dataframe)\n\n[1] 3 3\n\nnrow(meu_dataframe)\n\n[1] 3\n\nncol(meu_dataframe)\n\n[1] 3\n\n\nPodemos também acessar o nome das colunas com a função colnames. Além disso, a modificação do nome das colunas segue o mesmo padrão de uma lista ou vetor atômico nomeado:\n\nnomeia_df &lt;- meu_dataframe\ncolnames(nomeia_df)\n\n[1] \"pessoa\" \"idade\"  \"Sexo\"  \n\ncolnames(nomeia_df) &lt;- c(\"modifica1\", \"modifica2\", \"modifica3\")\nnomeia_df\n\n      modifica1 modifica2 modifica3\n1         Bruce        30         M\n2 Dr. Manhattan        43         M\n3        Simone        45         F"
  },
  {
    "objectID": "gabriel_curso_r.html#combinando-data-frames",
    "href": "gabriel_curso_r.html#combinando-data-frames",
    "title": "Introdução à linguagem de programação R",
    "section": "Combinando Data Frames",
    "text": "Combinando Data Frames\nA função rbind serve para unir dois data frames (ou matrizes) por linha, ou por coluna com a função cbind:\n\nmeu_dataframe2 &lt;- data.frame(\n  pessoa=\"Brian\",\n  idade=7,\n  Sexo=factor(\"M\",levels=levels(meu_dataframe$Sexo))\n  )\n\n# Juntando por linha\n\nrbind(meu_dataframe, meu_dataframe2)\n\n         pessoa idade Sexo\n1         Bruce    30    M\n2 Dr. Manhattan    43    M\n3        Simone    45    F\n4         Brian     7    M"
  },
  {
    "objectID": "gabriel_curso_r.html#combinando-data-frames-1",
    "href": "gabriel_curso_r.html#combinando-data-frames-1",
    "title": "Introdução à linguagem de programação R",
    "section": "Combinando Data Frames",
    "text": "Combinando Data Frames\nAgora, utilizando a função rbind, podemos combinar dois data frames como se estivessemos adicionando novas variáveis ao banco de dados:\n\nmeu_dataframe3 &lt;- data.frame(\n  sobrenome = c(\"Wayne\", \"Osterman\", \"Pereira\"),\n  filme = c(\"Batman\", \"Watchman\", NA)\n)\n\ncbind(meu_dataframe, meu_dataframe3)\n\n         pessoa idade Sexo sobrenome    filme\n1         Bruce    30    M     Wayne   Batman\n2 Dr. Manhattan    43    M  Osterman Watchman\n3        Simone    45    F   Pereira     &lt;NA&gt;\n\n\nPodemos adicionar variáveis utilizando o cifrão:\n\nmeu_dataframe3$quadrinhos &lt;- c(\"Sim\", \"Sim\", \"Não\")\nmeu_dataframe3\n\n  sobrenome    filme quadrinhos\n1     Wayne   Batman        Sim\n2  Osterman Watchman        Sim\n3   Pereira     &lt;NA&gt;        Não"
  },
  {
    "objectID": "gabriel_curso_r.html#checando-se-é-data-frame",
    "href": "gabriel_curso_r.html#checando-se-é-data-frame",
    "title": "Introdução à linguagem de programação R",
    "section": "Checando se é data frame",
    "text": "Checando se é data frame\nPara checar se é um objeto é da estrutura de dado do tipo dataframe, podemos utilizar a função is.data.frame. Assim como as outras funções desse tipo, ela retorná TRUE para saber se for verdade e FALSE, caso contrário:\n\nis.data.frame(meu_dataframe3)\n\n[1] TRUE"
  },
  {
    "objectID": "gabriel_curso_r.html#exercícios-de-data-frame",
    "href": "gabriel_curso_r.html#exercícios-de-data-frame",
    "title": "Introdução à linguagem de programação R",
    "section": "Exercícios de Data Frame",
    "text": "Exercícios de Data Frame\nExercício: Um professor irá criar um data frame para armazenar as notas de 5 alunos de sua turma em que cada aluno poderá ter realizado no máximo 3 avaliações. Crie um data frame com duas colunas sendo a primeira com os nomes dos alunos e a segunda com as notas das avaliações."
  },
  {
    "objectID": "gabriel_curso_r.html#exercícios-de-data-frame-1",
    "href": "gabriel_curso_r.html#exercícios-de-data-frame-1",
    "title": "Introdução à linguagem de programação R",
    "section": "Exercícios de Data Frame",
    "text": "Exercícios de Data Frame\nExercício: Inicialmente, crie a lista abaixo: notas &lt;- list(aluno_1 = c(7.1, 3.2, NA), aluno_2 = c(2.7, 8.8, 10.0), aluno_3 = c(0.0, NA, NA), aluno_4 = c(7.7, 8.4, 6.3), aluno_5 = c(3.6, 6.6, 8.1), aluno_6 = c(NA, NA, NA), aluno_7 = c(7.4, 7.1, 7.3), aluno_8 = c(10.0, NA, 7.0), aluno_9 = c(1.6, 3.2, 5.3), aluno_10 = c(8.8, 9.2, 8.0))\na) Crie o vetor status contendo o status dos dez alunos. Considere: A (aprovado), REP (reprovado), F (final). Dica: Considere as regras de nossa instituição.\nb): Crie o vetor alunos com os nomes dos alunos. Considere os nome fictício Aluno_1 para o primeiro aluno e de forma análoga para os demais alunos. Crie esse vetor utilizando a função paste().\nc): Construa um data frame de nome histórico com as variáveis nomes, notas e status.\nd): Com base no data frame de nome historico, construa um outro data frame com o nome aprovados com os alunos aprovados. De forma análoga para os demais status.\ne): Suponha que o professor est´a interessado em saber quais alunos foram ou tem alguma chance de assumir o status de aprovado. Construa o data frame de nome bons alunos com estes alunos.\nf): Modifique os nomes das linhas do data frame historico colocando id 1 na primeira linha e respectivamente no mesmo padr˜ao para as demais linhas.\ng): Obtenha por meio do data frame de nome historico um novo data frame (historico na) com os alunos que deixaram ao menos uma prova para repor.\nh): Apenas para os alunos que fizeram as três avaliações, obtenha uma média aritmética das avaliações. Acrescente a variável de nome media no data frame historico."
  },
  {
    "objectID": "gabriel_curso_r.html#exercícios-de-data-frame-2",
    "href": "gabriel_curso_r.html#exercícios-de-data-frame-2",
    "title": "Introdução à linguagem de programação R",
    "section": "Exercícios de Data Frame",
    "text": "Exercícios de Data Frame\nExercício: Utilizando o conjunto de dados de nome state.x77 responda os itens abaixo:\nPara acessar o conjunto de dados state.x77 basta digitar state.x77, ele já vem carregado no R\n\nConstrua o data frame dados a partir de state.x77.\nObtenha um data frame de nome dados 1 com as observações de dados que possua população maior que 4246, isto é, com os estados estadunidenses que possua uma população maior que 4246 (quatro milhões duzentos e quarenta e seis mil).\nObtenha o data frame dados 2 com as observações população maior que 4246 e menores que 8 milhões, isto é, menor que 8000.\nObtenha o vetor estados c com os nomes dos estados que obedecem os critérios do item c.\nConstrua o data frame dados 3 com os estados estadunidenses com população maior que 1.5 vezes a média dos 50 estados considerados. Obtenha o vetor com o nome dos estados que obedecem essa regra.\nConstrua o data frame dados 4 com os estados estadunidenses com população maior que duas vezes a mediana dos 50 estados e que tenha uma população com expectativa de vida maior que 71.84 anos.\nObtenha o data frame dados 5 com os estados estadunidenses com renda maior que a média nacional, expectativa de vida maior que 72 anos.\nAdicione ao data frame dados duas linhas com a média de todas as variáveis e variâncias, respectivamente."
  }
]